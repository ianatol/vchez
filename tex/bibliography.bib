
@article{chargueraud_locally_2012,
	title = {The locally nameless representation},
	volume = {49},
	number = {3},
	journal = {Journal of automated reasoning},
	author = {Charguéraud, Arthur},
	year = {2012},
	note = {Publisher: Springer},
	pages = {363--408},
}

@Inbook{guttman_vlisp_system_1995,
author="Guttman, Joshua D.
and Ramsdell, John D.
and Swarup, Vipin",
title="The VLISP Verified Scheme System",
bookTitle="VLISP A Verfied Implementation of Scheme: A Special Issue of Lisp and Symbolic Computation, An International Journal Vol. 8, Nos. 1 {\&} 2 March 1995",
year="1995",
publisher="Springer US",
address="Boston, MA",
pages="33--110",
abstract="The VLISP project has produced a rigorously verified compiler from Scheme to byte codes, and a verified interpreter for the resulting byte codes. The official denotational semantics for Scheme provides the main criterion of correctness. The Wand-Clinger technique was used to prove correctness of the primary compiler step. Then a state machine operational semantics is proved to be faithful to the denotational semantics. The remainder of the implementation is verified by a succession of state machine refinement proofs. These include proofs that garbage collection is a sound implementation strategy, and that a particular garbage collection algorithm is correct.",
isbn="978-1-4615-2339-0",
doi="10.1007/978-1-4615-2339-0_2",
url="https://doi.org/10.1007/978-1-4615-2339-0_2"
}



@ARTICLE{IEEE_scheme,  author={},  journal={IEEE Std 1178-1990},   title={IEEE Standard for the Scheme Programming Language},   year={1991},  volume={},  number={},  pages={1-},  doi={10.1109/IEEESTD.1991.101032}}

@article{aydemir_engineering_2008,
	title = {Engineering formal metatheory},
	volume = {43},
	number = {1},
	journal = {Acm sigplan notices},
	author = {Aydemir, Brian and Charguéraud, Arthur and Pierce, Benjamin C and Pollack, Randy and Weirich, Stephanie},
	year = {2008},
	note = {Publisher: ACM New York, NY, USA},
	pages = {3--15},
}

@article{schmidt1996programming,
  title={Programming language semantics},
  author={Schmidt, David A},
  journal={ACM Computing Surveys (CSUR)},
  volume={28},
  number={1},
  pages={265--267},
  year={1996},
  publisher={ACM New York, NY, USA}
}

@inproceedings{keep2013nanopass,
  title={A nanopass framework for commercial compiler development},
  author={Keep, Andrew W and Dybvig, R Kent},
  booktitle={Proceedings of the 18th ACM SIGPLAN international conference on Functional programming},
  pages={343--350},
  year={2013}
}



@book{wilhelm2013compiler,
  title={Compiler design: syntactic and semantic analysis},
  author={Wilhelm, Reinhard and Seidl, Helmut and Hack, Sebastian},
  year={2013},
  publisher={Springer Science \& Business Media}
}


@article{ayewah2008using,
  title={Using static analysis to find bugs},
  author={Ayewah, Nathaniel and Pugh, William and Hovemeyer, David and Morgenthaler, J David and Penix, John},
  journal={IEEE software},
  volume={25},
  number={5},
  pages={22--29},
  year={2008},
  publisher={IEEE}
}


@article{sandler2010killed,
  title={Killed by code: Software transparency in implantable medical devices},
  author={Sandler, Karen and Ohrstrom, Lysandra and Moy, Laura and McVay, Robert},
  journal={Software Freedom Law Center},
  pages={308--319},
  year={2010}
}

@article{aho1986compilers,
  title={Compilers, principles, techniques},
  author={Aho, Alfred V and Sethi, Ravi and Ullman, Jeffrey D},
  journal={Addison wesley},
  volume={7},
  number={8},
  pages={9},
  year={1986}
}



@ARTICLE{med_software,

  author={Lee, I. and Pappas, G.J. and Cleaveland, R. and Hatcliff, J. and Krogh, B.H. and Lee, P. and Rubin, H. and Sha, L.},

  journal={Computer}, 

  title={High-confidence medical device software and systems}, 

  year={2006},

  volume={39},

  number={4},

  pages={33-38},

  doi={10.1109/MC.2006.127}}


@article{pierce_software_2010,
	title = {Software foundations},
	journal = {Webpage: http://www. cis. upenn. edu/bcpierce/sf/current/index. html},
	author = {Pierce, Benjamin C and Casinghino, Chris and Gaboardi, Marco and Greenberg, Michael and Hriţcu, Cătălin and Sjöberg, Vilhelm and Yorgey, Brent},
	year = {2010},
}

@book{felleisen_semantics_2009,
	edition = {1st},
	title = {Semantics {Engineering} with {PLT} {Redex}},
	isbn = {0-262-06275-5},
	abstract = {This text is the first comprehensive presentation of reduction semantics in one volume; it also introduces the first reliable and easy-to-use tool set for such forms of semantics. Software engineers have long known that automatic tool support is critical for rapid prototyping and modeling, and this book is addressed to the working semantics engineer (graduate student or professional language designer). The book comes with a prototyping tool suite to develop, explore, test, debug, and publish semantic models of programming languages. With PLT Redex, semanticists can formulate models as grammars and reduction models on their computers with the ease of paper and pencil. The text first presents a framework for the formulation of language models, focusing on equational calculi and abstract machines, then introduces PLT Redex, a suite of software tools for expressing these models as PLT Redex models. Finally, experts describe a range of models formulated in Redex. PLT Redex comes with the PLT Scheme implementation, available free at http://www.plt-scheme.org/. Readers can download the software and experiment with Redex as they work their way through the book. For more information (including the preface, a sample syllabus, and a quick introduction to Redex), see the Redex website at http://redex.plt-scheme.org/. Matthias Felleisen, Robert Bruce Findler, and Matthew Flatt are the authors (with Shiram Krishnamurthi) of How to Design Programs: An Introduction to Programming and Computing, also published by the MIT Press.},
	publisher = {The MIT Press},
	author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew},
	year = {2009},
}

@inproceedings{mccarthy_correctness_1967,
	title = {Correctness of a compiler for arithmetic expressions},
	publisher = {American Mathematical Society},
	author = {Mccarthy, John and Painter, James},
	year = {1967},
	pages = {33--41},
}

@article{milner_proving_1972,
	title = {Proving compiler correctness in a mechanised logic},
	volume = {7},
	language = {English},
	journal = {Machine Intelligence},
	author = {Milner, Robin and Weyhrauch, R. W.},
	year = {1972},
	pages = {51--73},
}

@incollection{guttman_vlisp_1995,
	address = {Boston, MA},
	title = {{VLISP}: {A} {Verified} {Implementation} of {Scheme}},
	isbn = {978-1-4615-2339-0},
	url = {https://doi.org/10.1007/978-1-4615-2339-0_1},
	abstract = {The VLISP project showed how to produce a comprehensively verified implementation for a programming language, namely Scheme. This paper introduces two more detailed studies on VLISP [13, 21]. It summarizes the basic techniques that were used repeatedly throughout the effort. It presents scientific conclusions about the applicability of the these techniques as well as engineering conclusions about the crucial choices that allowed the verification to succeed.},
	booktitle = {{VLISP} {A} {Verfied} {Implementation} of {Scheme}: {A} {Special} {Issue} of {Lisp} and {Symbolic} {Computation}, {An} {International} {Journal} {Vol}. 8, {Nos}. 1 \& 2 {March} 1995},
	publisher = {Springer US},
	author = {Guttman, Joshua D. and Ramsdell, John D. and Wand, Mitchell},
	year = {1995},
	doi = {10.1007/978-1-4615-2339-0_1},
	pages = {5--32},
}

@book{dybvig_scheme_2009,
	edition = {4th},
	title = {The {Scheme} {Programming} {Language}, 4th {Edition}},
	isbn = {0-262-51298-X},
	abstract = {Scheme is a general-purpose programming language, descended from Algol and Lisp, widely used in computing education and research and a broad range of industrial applications. This thoroughly updated edition of The Scheme Programming Language provides an introduction to Scheme and a definitive reference for standard Scheme, presented in a clear and concise manner. Written for professionals and students with some prior programming experience, it begins by leading the programmer gently through the basics of Scheme and continues with an introduction to some of the more advanced features of the language. The fourth edition has been substantially revised and expanded to bring the content up to date with the current Scheme standard, the Revised6 Report on Scheme. All parts of the book were updated and three new chapters were added, covering the language's new library, exception handling, and record-definition features. The book offers three chapters of introductory material with numerous examples, eight chapters of reference material, and one chapter of extended examples and additional exercises. All of the examples can be entered directly from the keyboard into an interactive Scheme session. Answers to many of the exercises, a complete formal syntax of Scheme, and a summary of forms and procedures are provided in appendixes. The Scheme Programming Language is the only book available that serves both as an introductory text in a variety of courses and as an essential reference for Scheme programmers.},
	publisher = {The MIT Press},
	author = {Dybvig, R. Kent},
	year = {2009},
}

@article{brady2013idris,
  title={Idris, a general-purpose dependently typed programming language: Design and implementation.},
  author={Brady, Edwin},
  journal={J. Funct. Program.},
  volume={23},
  number={5},
  pages={552--593},
  year={2013}
}

@inproceedings{de2015lean,
  title={The Lean theorem prover (system description)},
  author={de Moura, Leonardo and Kong, Soonho and Avigad, Jeremy and Van Doorn, Floris and von Raumer, Jakob},
  booktitle={International Conference on Automated Deduction},
  pages={378--388},
  year={2015},
  organization={Springer}
}

@inproceedings{bove2009brief,
  title={A brief overview of Agda--a functional language with dependent types},
  author={Bove, Ana and Dybjer, Peter and Norell, Ulf},
  booktitle={International Conference on Theorem Proving in Higher Order Logics},
  pages={73--78},
  year={2009},
  organization={Springer}
}

@inproceedings{sevvcik2011relaxed,
  title={Relaxed-memory concurrency and verified compilation},
  author={{\^S}ev{\v{c}}ik, Jaroslav and Vafeiadis, Viktor and Zappa Nardelli, Francesco and Jagannathan, Suresh and Sewell, Peter},
  booktitle={Proceedings of the 38th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={43--54},
  year={2011}
}

@inproceedings{lochbihler2010verifying,
  title={Verifying a compiler for Java threads},
  author={Lochbihler, Andreas},
  booktitle={European Symposium on Programming},
  pages={427--447},
  year={2010},
  organization={Springer}
}


@article{geuvers2009proof,
  title={Proof assistants: History, ideas and future},
  author={Geuvers, Herman},
  journal={Sadhana},
  volume={34},
  number={1},
  pages={3--25},
  year={2009},
  publisher={Springer}
}

@article{chlipala2010verified,
  title={A verified compiler for an impure functional language},
  author={Chlipala, Adam},
  journal={ACM Sigplan Notices},
  volume={45},
  number={1},
  pages={93--106},
  year={2010},
  publisher={ACM New York, NY, USA}
}


@inproceedings{anand2017certicoq,
  title={CertiCoq: A verified compiler for Coq},
  author={Anand, Abhishek and Appel, Andrew and Morrisett, Greg and Paraskevopoulou, Zoe and Pollack, Randy and Belanger, Olivier Savary and Sozeau, Matthieu and Weaver, Matthew},
  booktitle={The third international workshop on Coq for programming languages (CoqPL)},
  year={2017}
}


@book{nipkow2002isabelle,
  title={Isabelle/HOL: a proof assistant for higher-order logic},
  author={Nipkow, Tobias and Paulson, Lawrence C and Wenzel, Markus},
  volume={2283},
  year={2002},
  publisher={Springer Science \& Business Media}
}


@article{kumar2014cakeml,
  title={CakeML: a verified implementation of ML},
  author={Kumar, Ramana and Myreen, Magnus O and Norrish, Michael and Owens, Scott},
  journal={ACM SIGPLAN Notices},
  volume={49},
  number={1},
  pages={179--191},
  year={2014},
  publisher={ACM New York, NY, USA}
}



@article{barendregt2001proof,
  title={Proof-Assistants Using Dependent Type Systems.},
  author={Barendregt, Henk and Geuvers, Herman},
  journal={Handbook of automated reasoning},
  volume={2},
  pages={1149--1238},
  year={2001}
}



@phdthesis{leroy2019compcert,
  title={The CompCert C verified compiler: Documentation and user’s manual},
  author={Leroy, Xavier},
  year={2019},
  school={Inria}
}


@inproceedings{felleisen2015racket,
  title={The racket manifesto},
  author={Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram and Barzilay, Eli and McCarthy, Jay and Tobin-Hochstadt, Sam},
  booktitle={1st Summit on Advances in Programming Languages (SNAPL 2015)},
  year={2015},
  organization={Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik}
}


@article{mccarthy1960recursive,
  title={Recursive functions of symbolic expressions and their computation by machine, part I},
  author={McCarthy, John},
  journal={Communications of the ACM},
  volume={3},
  number={4},
  pages={184--195},
  year={1960},
  publisher={ACM New York, NY, USA}
}


@article{sperber_revised6_2009,
	title = {Revised6 {Report} on the {Algorithmic} {Language} {Scheme}},
	volume = {19},
	doi = {10.1017/S0956796809990074},
	number = {S1},
	journal = {Journal of Functional Programming},
	author = {SPERBER, MICHAEL and DYBVIG, R. KENT and FLATT, MATTHEW and VAN STRAATEN, ANTON and FINDLER, ROBBY and MATTHEWS, JACOB},
	year = {2009},
	note = {Publisher: Cambridge University Press},
	pages = {1--301},
}

@article{leroy_formal_2009,
	title = {Formal {Verification} of a {Realistic} {Compiler}},
	volume = {52},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/1538788.1538814},
	doi = {10.1145/1538788.1538814},
	abstract = {This paper reports on the development and formal verification (proof of semantic preservation) of CompCert, a compiler from Clight (a large subset of the C programming language) to PowerPC assembly code, using the Coq proof assistant both for programming the compiler and for proving its correctness. Such a verified compiler is useful in the context of critical software and its formal verification: the verification of the compiler guarantees that the safety properties proved on the source code hold for the executable compiled code as well.},
	number = {7},
	journal = {Commun. ACM},
	author = {Leroy, Xavier},
	month = jul,
	year = {2009},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	pages = {107--115},
}

@article{kang_crellvm_2018,
	title = {Crellvm: {Verified} {Credible} {Compilation} for {LLVM}},
	volume = {53},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/3296979.3192377},
	doi = {10.1145/3296979.3192377},
	abstract = {Production compilers such as GCC and LLVM are large complex software systems, for which achieving a high level of reliability is hard. Although testing is an effective method for finding bugs, it alone cannot guarantee a high level of reliability. To provide a higher level of reliability, many approaches that examine compilers' internal logics have been proposed. However, none of them have been successfully applied to major optimizations of production compilers. This paper presents Crellvm: a verified credible compilation framework for LLVM, which can be used as a systematic way of providing a high level of reliability for major optimizations in LLVM. Specifically, we augment an LLVM optimizer to generate translation results together with their correctness proofs, which can then be checked by a proof checker formally verified in Coq. As case studies, we applied our approach to two major optimizations of LLVM: register promotion mem2reg and global value numbering gvn, having found four new miscompilation bugs (two in each).},
	number = {4},
	journal = {SIGPLAN Not.},
	author = {Kang, Jeehoon and Kim, Yoonseung and Song, Youngju and Lee, Juneyoung and Park, Sanghoon and Shin, Mark Dongyeon and Kim, Yonghyun and Cho, Sungkeun and Choi, Joonwon and Hur, Chung-Kil and Yi, Kwangkeun},
	month = jun,
	year = {2018},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Coq, compiler verification, credible compilation, LLVM, relational Hoare logic, translation validation},
	pages = {631--645},
}

@article{sussman_first_1998,
	title = {The {First} {Report} on {Scheme} {Revisited}},
	volume = {11},
	issn = {1573-0557},
	url = {https://doi.org/10.1023/A:1010079421970},
	doi = {10.1023/A:1010079421970},
	number = {4},
	journal = {Higher-Order and Symbolic Computation},
	author = {Sussman, Gerald Jay and Steele, Guy L.},
	month = dec,
	year = {1998},
	pages = {399--404},
}

@article{landin1965correspondence,
  title={Correspondence between ALGOL 60 and Church's Lambda-notation: part I},
  author={Landin, Peter J},
  journal={Communications of the ACM},
  volume={8},
  number={2},
  pages={89--101},
  year={1965},
  publisher={ACM New York, NY, USA}
}


@InCollection{sep-church-turing,
	author       =	{Copeland, B. Jack},
	title        =	{{The Church-Turing Thesis}},
	booktitle    =	{The {Stanford} Encyclopedia of Philosophy},
	editor       =	{Edward N. Zalta},
	howpublished =	{\url{https://plato.stanford.edu/archives/sum2020/entries/church-turing/}},
	year         =	{2020},
	edition      =	{{S}ummer 2020},
	publisher    =	{Metaphysics Research Lab, Stanford University}
}


@article{church1936unsolvable,
  title={An unsolvable problem of elementary number theory},
  author={Church, Alonzo},
  journal={American journal of mathematics},
  volume={58},
  number={2},
  pages={345--363},
  year={1936},
  publisher={JSTOR}
}

@incollection{nederpelt_survey_1994,
	series = {Studies in {Logic} and the {Foundations} of {Mathematics}},
	title = {A {Survey} of the {Project} {Automath}**{Reprinted} from: {Seldin}, {J}. {P}. and {Hindley}, {J}. {R}., eds., {To} {H}. {B}. {Curry}: {Essays} on {Combinatory} {Logic}, {Lambda} {Calculus} and {Formalism}, p. 579-606, by courtesy of {Academic} {Press} {Inc}., {Orlando}.},
	volume = {133},
	url = {https://www.sciencedirect.com/science/article/pii/S0049237X08702039},
	abstract = {Publisher Summary This chapter presents a short survey about the work that has been done on the Automath, is going on, and planned for the future. It also explains the concept of types and the matter of propositions as types and the survey is used to ventilate opinions and views in mathematics which are not easily set down in more technical reports. The project Automath develops a system of writing entire mathematical theories that verification of the correctness can be carried out by formal operations on the text. The motivations for the project: checking; understanding; and processing are discussed. These motives favor the choice of a system of a very general nature of formalizing mathematics of classical logic and set theory. One of the most important things in the project is that it expects machines to check the correctness of what humans have written. The machine has to find out whether there is a sequence of applications of the language rules that motivates the correctness of a line of the book.},
	booktitle = {Selected {Papers} on {Automath}},
	publisher = {Elsevier},
	author = {Bruijn, N. G. de},
	editor = {Nederpelt, R. P. and Geuvers, J. H. and Vrijer, R. C. de},
	year = {1994},
	doi = {10.1016/S0049-237X(08)70203-9},
	note = {ISSN: 0049-237X},
	pages = {141--161},
}

@book{dybvig1983chez,
  title={Chez Scheme Reference Manual: Version 1.0},
  author={Dybvig, R Kent and Smith, Bruce T},
  year={1983}
}

@misc{dybvig2011chez,
  title={Chez Scheme},
  author={Dybvig, R Kent and others},
  year={2011}
}


@article{martin-lof_intuitionistic_1998,
	title = {An intuitionistic theory of types},
	volume = {36},
	journal = {Twenty-five years of constructive type theory},
	author = {Martin-Löf, Per},
	year = {1998},
	pages = {127--172},
}

@phdthesis{girard_interpretation_1972,
	type = {{PhD} {Thesis}},
	title = {Interprétation fonctionnelle et élimination des coupures de l'arithmétique d'ordre supérieur},
	school = {Éditeur inconnu},
	author = {Girard, Jean-Yves},
	year = {1972},
}

@phdthesis{coquand_calculus_1986,
	type = {{PhD} {Thesis}},
	title = {The calculus of constructions},
	school = {INRIA},
	author = {Coquand, Thierry and Huet, Gérard},
	year = {1986},
}

@book{paulin-mohring_introduction_2015,
	title = {Introduction to the calculus of inductive constructions},
	publisher = {College Publications},
	author = {Paulin-Mohring, Christine},
	year = {2015},
}

@phdthesis{barras_coq_1997,
	type = {{PhD} {Thesis}},
	title = {The {Coq} proof assistant reference manual: {Version} 6.1},
	school = {Inria},
	author = {Barras, Bruno and Boutin, Samuel and Cornes, Cristina and Courant, Judicaël and Filliatre, Jean-Christophe and Gimenez, Eduardo and Herbelin, Hugo and Huet, Gerard and Munoz, Cesar and Murthy, Chetan and {others}},
	year = {1997},
}

@techreport{steele1978revised,
  title={The Revised Report on SCHEME: A Dialect of LISP.},
  author={Steele Jr, Guy Lewis and Sussman, Gerald Jay},
  year={1978},
  institution={MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB}
}

@inproceedings{delahaye_tactic_2000,
	title = {A tactic language for the system {Coq}},
	booktitle = {International {Conference} on {Logic} for {Programming} {Artificial} {Intelligence} and {Reasoning}},
	publisher = {Springer},
	author = {Delahaye, David},
	year = {2000},
	pages = {85--95},
}

@article{gonthier_formal_2008,
	title = {Formal proof–the four-color theorem},
	volume = {55},
	number = {11},
	journal = {Notices of the AMS},
	author = {Gonthier, Georges},
	year = {2008},
	pages = {1382--1393},
}

@article{voevodsky_univalent_2010,
	title = {Univalent foundations project},
	journal = {NSF grant application},
	author = {Voevodsky, Vladimir},
	year = {2010},
}
